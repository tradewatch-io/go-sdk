/*
tradewatch.io

Financial market data for Developers

API version: 3.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tradewatch

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CryptoExchangeItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoExchangeItem{}

// CryptoExchangeItem A cryptocurrency exchange
type CryptoExchangeItem struct {
	// Exchange identifier
	Id string `json:"id"`
	// Exchange name
	Name string `json:"name"`
	// Exchange established year
	YearEstablished int32 `json:"year_established"`
	// Exchange country
	Country string `json:"country"`
	// Exchange website URL
	Website string `json:"website"`
}

type _CryptoExchangeItem CryptoExchangeItem

// NewCryptoExchangeItem instantiates a new CryptoExchangeItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoExchangeItem(id string, name string, yearEstablished int32, country string, website string) *CryptoExchangeItem {
	this := CryptoExchangeItem{}
	this.Id = id
	this.Name = name
	this.YearEstablished = yearEstablished
	this.Country = country
	this.Website = website
	return &this
}

// NewCryptoExchangeItemWithDefaults instantiates a new CryptoExchangeItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoExchangeItemWithDefaults() *CryptoExchangeItem {
	this := CryptoExchangeItem{}
	return &this
}

// GetId returns the Id field value
func (o *CryptoExchangeItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CryptoExchangeItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CryptoExchangeItem) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CryptoExchangeItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CryptoExchangeItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CryptoExchangeItem) SetName(v string) {
	o.Name = v
}

// GetYearEstablished returns the YearEstablished field value
func (o *CryptoExchangeItem) GetYearEstablished() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.YearEstablished
}

// GetYearEstablishedOk returns a tuple with the YearEstablished field value
// and a boolean to check if the value has been set.
func (o *CryptoExchangeItem) GetYearEstablishedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.YearEstablished, true
}

// SetYearEstablished sets field value
func (o *CryptoExchangeItem) SetYearEstablished(v int32) {
	o.YearEstablished = v
}

// GetCountry returns the Country field value
func (o *CryptoExchangeItem) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *CryptoExchangeItem) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *CryptoExchangeItem) SetCountry(v string) {
	o.Country = v
}

// GetWebsite returns the Website field value
func (o *CryptoExchangeItem) GetWebsite() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Website
}

// GetWebsiteOk returns a tuple with the Website field value
// and a boolean to check if the value has been set.
func (o *CryptoExchangeItem) GetWebsiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Website, true
}

// SetWebsite sets field value
func (o *CryptoExchangeItem) SetWebsite(v string) {
	o.Website = v
}

func (o CryptoExchangeItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoExchangeItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["year_established"] = o.YearEstablished
	toSerialize["country"] = o.Country
	toSerialize["website"] = o.Website
	return toSerialize, nil
}

func (o *CryptoExchangeItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"year_established",
		"country",
		"website",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCryptoExchangeItem := _CryptoExchangeItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCryptoExchangeItem)

	if err != nil {
		return err
	}

	*o = CryptoExchangeItem(varCryptoExchangeItem)

	return err
}

type NullableCryptoExchangeItem struct {
	value *CryptoExchangeItem
	isSet bool
}

func (v NullableCryptoExchangeItem) Get() *CryptoExchangeItem {
	return v.value
}

func (v *NullableCryptoExchangeItem) Set(val *CryptoExchangeItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoExchangeItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoExchangeItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoExchangeItem(val *CryptoExchangeItem) *NullableCryptoExchangeItem {
	return &NullableCryptoExchangeItem{value: val, isSet: true}
}

func (v NullableCryptoExchangeItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoExchangeItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


