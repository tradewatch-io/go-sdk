/*
tradewatch.io

Financial market data for Developers

API version: 3.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tradewatch

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConversionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversionInfo{}

// ConversionInfo struct for ConversionInfo
type ConversionInfo struct {
	Timestamp int32 `json:"timestamp"`
	Rate float32 `json:"rate"`
}

type _ConversionInfo ConversionInfo

// NewConversionInfo instantiates a new ConversionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionInfo(timestamp int32, rate float32) *ConversionInfo {
	this := ConversionInfo{}
	this.Timestamp = timestamp
	this.Rate = rate
	return &this
}

// NewConversionInfoWithDefaults instantiates a new ConversionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionInfoWithDefaults() *ConversionInfo {
	this := ConversionInfo{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *ConversionInfo) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ConversionInfo) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ConversionInfo) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetRate returns the Rate field value
func (o *ConversionInfo) GetRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *ConversionInfo) GetRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *ConversionInfo) SetRate(v float32) {
	o.Rate = v
}

func (o ConversionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["rate"] = o.Rate
	return toSerialize, nil
}

func (o *ConversionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"rate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConversionInfo := _ConversionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConversionInfo)

	if err != nil {
		return err
	}

	*o = ConversionInfo(varConversionInfo)

	return err
}

type NullableConversionInfo struct {
	value *ConversionInfo
	isSet bool
}

func (v NullableConversionInfo) Get() *ConversionInfo {
	return v.value
}

func (v *NullableConversionInfo) Set(val *ConversionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionInfo(val *ConversionInfo) *NullableConversionInfo {
	return &NullableConversionInfo{value: val, isSet: true}
}

func (v NullableConversionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


