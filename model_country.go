/*
tradewatch.io

Financial market data for Developers

API version: 3.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tradewatch

import (
	"encoding/json"
	"fmt"
)

// Country The country associated with the symbol (see ISO 3166-1 alpha-2)
type Country string

// List of Country
const (
	FR Country = "fr"
	US Country = "us"
	DE Country = "de"
	NZ Country = "nz"
	NL Country = "nl"
	UK Country = "uk"
	ES Country = "es"
	CN Country = "cn"
	CH Country = "ch"
	GR Country = "gr"
	BE Country = "be"
	PT Country = "pt"
	IT Country = "it"
	ALL Country = "all"
)

// All allowed values of Country enum
var AllowedCountryEnumValues = []Country{
	"fr",
	"us",
	"de",
	"nz",
	"nl",
	"uk",
	"es",
	"cn",
	"ch",
	"gr",
	"be",
	"pt",
	"it",
	"all",
}

func (v *Country) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Country(value)
	for _, existing := range AllowedCountryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Country", value)
}

// NewCountryFromValue returns a pointer to a valid Country
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCountryFromValue(v string) (*Country, error) {
	ev := Country(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Country: valid values are %v", v, AllowedCountryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Country) IsValid() bool {
	for _, existing := range AllowedCountryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Country value
func (v Country) Ptr() *Country {
	return &v
}

type NullableCountry struct {
	value *Country
	isSet bool
}

func (v NullableCountry) Get() *Country {
	return v.value
}

func (v *NullableCountry) Set(val *Country) {
	v.value = val
	v.isSet = true
}

func (v NullableCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountry(val *Country) *NullableCountry {
	return &NullableCountry{value: val, isSet: true}
}

func (v NullableCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

