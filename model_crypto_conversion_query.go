/*
tradewatch.io

Financial market data for Developers

API version: 3.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tradewatch

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CryptoConversionQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoConversionQuery{}

// CryptoConversionQuery struct for CryptoConversionQuery
type CryptoConversionQuery struct {
	From string `json:"from"`
	To string `json:"to"`
	Amount *float32 `json:"amount,omitempty"`
	Precision *int32 `json:"precision,omitempty"`
}

type _CryptoConversionQuery CryptoConversionQuery

// NewCryptoConversionQuery instantiates a new CryptoConversionQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoConversionQuery(from string, to string) *CryptoConversionQuery {
	this := CryptoConversionQuery{}
	this.From = from
	this.To = to
	var amount float32 = 10
	this.Amount = &amount
	var precision int32 = 8
	this.Precision = &precision
	return &this
}

// NewCryptoConversionQueryWithDefaults instantiates a new CryptoConversionQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoConversionQueryWithDefaults() *CryptoConversionQuery {
	this := CryptoConversionQuery{}
	var amount float32 = 10
	this.Amount = &amount
	var precision int32 = 8
	this.Precision = &precision
	return &this
}

// GetFrom returns the From field value
func (o *CryptoConversionQuery) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *CryptoConversionQuery) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *CryptoConversionQuery) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value
func (o *CryptoConversionQuery) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *CryptoConversionQuery) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *CryptoConversionQuery) SetTo(v string) {
	o.To = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CryptoConversionQuery) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoConversionQuery) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CryptoConversionQuery) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *CryptoConversionQuery) SetAmount(v float32) {
	o.Amount = &v
}

// GetPrecision returns the Precision field value if set, zero value otherwise.
func (o *CryptoConversionQuery) GetPrecision() int32 {
	if o == nil || IsNil(o.Precision) {
		var ret int32
		return ret
	}
	return *o.Precision
}

// GetPrecisionOk returns a tuple with the Precision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoConversionQuery) GetPrecisionOk() (*int32, bool) {
	if o == nil || IsNil(o.Precision) {
		return nil, false
	}
	return o.Precision, true
}

// HasPrecision returns a boolean if a field has been set.
func (o *CryptoConversionQuery) HasPrecision() bool {
	if o != nil && !IsNil(o.Precision) {
		return true
	}

	return false
}

// SetPrecision gets a reference to the given int32 and assigns it to the Precision field.
func (o *CryptoConversionQuery) SetPrecision(v int32) {
	o.Precision = &v
}

func (o CryptoConversionQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoConversionQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Precision) {
		toSerialize["precision"] = o.Precision
	}
	return toSerialize, nil
}

func (o *CryptoConversionQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCryptoConversionQuery := _CryptoConversionQuery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCryptoConversionQuery)

	if err != nil {
		return err
	}

	*o = CryptoConversionQuery(varCryptoConversionQuery)

	return err
}

type NullableCryptoConversionQuery struct {
	value *CryptoConversionQuery
	isSet bool
}

func (v NullableCryptoConversionQuery) Get() *CryptoConversionQuery {
	return v.value
}

func (v *NullableCryptoConversionQuery) Set(val *CryptoConversionQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoConversionQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoConversionQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoConversionQuery(val *CryptoConversionQuery) *NullableCryptoConversionQuery {
	return &NullableCryptoConversionQuery{value: val, isSet: true}
}

func (v NullableCryptoConversionQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoConversionQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


