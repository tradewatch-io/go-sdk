/*
tradewatch.io

Financial market data for Developers

API version: 3.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tradewatch

import (
	"encoding/json"
	"fmt"
)

// CommodityType the model 'CommodityType'
type CommodityType string

// List of CommodityType
const (
	AGRICULTURAL CommodityType = "agricultural"
	ENERGY CommodityType = "energy"
	METAL CommodityType = "metal"
	ALL CommodityType = "all"
)

// All allowed values of CommodityType enum
var AllowedCommodityTypeEnumValues = []CommodityType{
	"agricultural",
	"energy",
	"metal",
	"all",
}

func (v *CommodityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommodityType(value)
	for _, existing := range AllowedCommodityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommodityType", value)
}

// NewCommodityTypeFromValue returns a pointer to a valid CommodityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommodityTypeFromValue(v string) (*CommodityType, error) {
	ev := CommodityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommodityType: valid values are %v", v, AllowedCommodityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommodityType) IsValid() bool {
	for _, existing := range AllowedCommodityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommodityType value
func (v CommodityType) Ptr() *CommodityType {
	return &v
}

type NullableCommodityType struct {
	value *CommodityType
	isSet bool
}

func (v NullableCommodityType) Get() *CommodityType {
	return v.value
}

func (v *NullableCommodityType) Set(val *CommodityType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommodityType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommodityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommodityType(val *CommodityType) *NullableCommodityType {
	return &NullableCommodityType{value: val, isSet: true}
}

func (v NullableCommodityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommodityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

