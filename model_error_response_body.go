/*
tradewatch.io

Financial market data for Developers

API version: 3.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tradewatch

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorResponseBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseBody{}

// ErrorResponseBody struct for ErrorResponseBody
type ErrorResponseBody struct {
	Error ErrorDetails `json:"error"`
}

type _ErrorResponseBody ErrorResponseBody

// NewErrorResponseBody instantiates a new ErrorResponseBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseBody(error_ ErrorDetails) *ErrorResponseBody {
	this := ErrorResponseBody{}
	this.Error = error_
	return &this
}

// NewErrorResponseBodyWithDefaults instantiates a new ErrorResponseBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseBodyWithDefaults() *ErrorResponseBody {
	this := ErrorResponseBody{}
	return &this
}

// GetError returns the Error field value
func (o *ErrorResponseBody) GetError() ErrorDetails {
	if o == nil {
		var ret ErrorDetails
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseBody) GetErrorOk() (*ErrorDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *ErrorResponseBody) SetError(v ErrorDetails) {
	o.Error = v
}

func (o ErrorResponseBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error"] = o.Error
	return toSerialize, nil
}

func (o *ErrorResponseBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponseBody := _ErrorResponseBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorResponseBody)

	if err != nil {
		return err
	}

	*o = ErrorResponseBody(varErrorResponseBody)

	return err
}

type NullableErrorResponseBody struct {
	value *ErrorResponseBody
	isSet bool
}

func (v NullableErrorResponseBody) Get() *ErrorResponseBody {
	return v.value
}

func (v *NullableErrorResponseBody) Set(val *ErrorResponseBody) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseBody) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseBody(val *ErrorResponseBody) *NullableErrorResponseBody {
	return &NullableErrorResponseBody{value: val, isSet: true}
}

func (v NullableErrorResponseBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


