/*
tradewatch.io

Financial market data for Developers

API version: 3.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tradewatch

import (
	"encoding/json"
	"fmt"
)

// SymbolsListMode the model 'SymbolsListMode'
type SymbolsListMode string

// List of SymbolsListMode
const (
	FULL SymbolsListMode = "full"
	BASE SymbolsListMode = "base"
)

// All allowed values of SymbolsListMode enum
var AllowedSymbolsListModeEnumValues = []SymbolsListMode{
	"full",
	"base",
}

func (v *SymbolsListMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SymbolsListMode(value)
	for _, existing := range AllowedSymbolsListModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SymbolsListMode", value)
}

// NewSymbolsListModeFromValue returns a pointer to a valid SymbolsListMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSymbolsListModeFromValue(v string) (*SymbolsListMode, error) {
	ev := SymbolsListMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SymbolsListMode: valid values are %v", v, AllowedSymbolsListModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SymbolsListMode) IsValid() bool {
	for _, existing := range AllowedSymbolsListModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SymbolsListMode value
func (v SymbolsListMode) Ptr() *SymbolsListMode {
	return &v
}

type NullableSymbolsListMode struct {
	value *SymbolsListMode
	isSet bool
}

func (v NullableSymbolsListMode) Get() *SymbolsListMode {
	return v.value
}

func (v *NullableSymbolsListMode) Set(val *SymbolsListMode) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolsListMode) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolsListMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolsListMode(val *SymbolsListMode) *NullableSymbolsListMode {
	return &NullableSymbolsListMode{value: val, isSet: true}
}

func (v NullableSymbolsListMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolsListMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

