/*
tradewatch.io

Financial market data for Developers

API version: 3.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tradewatch

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CryptoExchangesList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoExchangesList{}

// CryptoExchangesList A list of cryptocurrency exchanges
type CryptoExchangesList struct {
	Items []CryptoExchangeItem `json:"items"`
}

type _CryptoExchangesList CryptoExchangesList

// NewCryptoExchangesList instantiates a new CryptoExchangesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoExchangesList(items []CryptoExchangeItem) *CryptoExchangesList {
	this := CryptoExchangesList{}
	this.Items = items
	return &this
}

// NewCryptoExchangesListWithDefaults instantiates a new CryptoExchangesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoExchangesListWithDefaults() *CryptoExchangesList {
	this := CryptoExchangesList{}
	return &this
}

// GetItems returns the Items field value
func (o *CryptoExchangesList) GetItems() []CryptoExchangeItem {
	if o == nil {
		var ret []CryptoExchangeItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CryptoExchangesList) GetItemsOk() ([]CryptoExchangeItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *CryptoExchangesList) SetItems(v []CryptoExchangeItem) {
	o.Items = v
}

func (o CryptoExchangesList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoExchangesList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *CryptoExchangesList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCryptoExchangesList := _CryptoExchangesList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCryptoExchangesList)

	if err != nil {
		return err
	}

	*o = CryptoExchangesList(varCryptoExchangesList)

	return err
}

type NullableCryptoExchangesList struct {
	value *CryptoExchangesList
	isSet bool
}

func (v NullableCryptoExchangesList) Get() *CryptoExchangesList {
	return v.value
}

func (v *NullableCryptoExchangesList) Set(val *CryptoExchangesList) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoExchangesList) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoExchangesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoExchangesList(val *CryptoExchangesList) *NullableCryptoExchangesList {
	return &NullableCryptoExchangesList{value: val, isSet: true}
}

func (v NullableCryptoExchangesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoExchangesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


